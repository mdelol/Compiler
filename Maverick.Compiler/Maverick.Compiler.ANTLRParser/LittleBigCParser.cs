//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Dev/GitHub/Compiler/Grammar\LittleBigC.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class LittleBigCParser : Parser {
	public const int
		T__0=1, Break=2, Case=3, Continue=4, Else=5, Float=6, Bool=7, String=8, 
		Hashtable=9, For=10, If=11, Int=12, Return=13, Void=14, While=15, New=16, 
		LeftParen=17, RightParen=18, LeftBracket=19, RightBracket=20, LeftBrace=21, 
		RightBrace=22, Less=23, LessEqual=24, Greater=25, GreaterEqual=26, Plus=27, 
		Minus=28, Star=29, Div=30, Mod=31, AndAnd=32, OrOr=33, Not=34, Semi=35, 
		Comma=36, Assign=37, Equal=38, NotEqual=39, Dot=40, Identifier=41, IntegerConstant=42, 
		FloatingConstant=43, StringConstant=44, BooleanConstant=45, Whitespace=46, 
		Newline=47, BlockComment=48, LineComment=49;
	public const int
		RULE_compilationUnit = 0, RULE_translationUnit = 1, RULE_externalDeclaration = 2, 
		RULE_variableType = 3, RULE_simpleVariableType = 4, RULE_variableDeclaration = 5, 
		RULE_initExpression = 6, RULE_arrayInitExpression = 7, RULE_functionDefinition = 8, 
		RULE_formalParameters = 9, RULE_formalParameter = 10, RULE_blockItemList = 11, 
		RULE_blockItem = 12, RULE_statement = 13, RULE_compoundStatement = 14, 
		RULE_expressionStatement = 15, RULE_selectionStatement = 16, RULE_iterationStatement = 17, 
		RULE_jumpStatement = 18, RULE_primaryExpression = 19, RULE_postfixExpression = 20, 
		RULE_argumentExpressionList = 21, RULE_multiplicativeExpression = 22, 
		RULE_additiveExpression = 23, RULE_relationalExpression = 24, RULE_equalityExpression = 25, 
		RULE_logicalAndExpression = 26, RULE_logicalOrExpression = 27, RULE_assignmentExpression = 28, 
		RULE_expression = 29, RULE_constant = 30;
	public static readonly string[] ruleNames = {
		"compilationUnit", "translationUnit", "externalDeclaration", "variableType", 
		"simpleVariableType", "variableDeclaration", "initExpression", "arrayInitExpression", 
		"functionDefinition", "formalParameters", "formalParameter", "blockItemList", 
		"blockItem", "statement", "compoundStatement", "expressionStatement", 
		"selectionStatement", "iterationStatement", "jumpStatement", "primaryExpression", 
		"postfixExpression", "argumentExpressionList", "multiplicativeExpression", 
		"additiveExpression", "relationalExpression", "equalityExpression", "logicalAndExpression", 
		"logicalOrExpression", "assignmentExpression", "expression", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'[]'", "'break'", "'case'", "'continue'", "'else'", "'float'", 
		"'bool'", "'string'", "'hashtable'", "'for'", "'if'", "'int'", "'return'", 
		"'void'", "'while'", "'new'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", 
		"'||'", "'!'", "';'", "','", "'='", "'=='", "'!='", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "Break", "Case", "Continue", "Else", "Float", "Bool", "String", 
		"Hashtable", "For", "If", "Int", "Return", "Void", "While", "New", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "Plus", "Minus", "Star", 
		"Div", "Mod", "AndAnd", "OrOr", "Not", "Semi", "Comma", "Assign", "Equal", 
		"NotEqual", "Dot", "Identifier", "IntegerConstant", "FloatingConstant", 
		"StringConstant", "BooleanConstant", "Whitespace", "Newline", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LittleBigC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LittleBigCParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LittleBigCParser.Eof, 0); }
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Float) | (1L << Bool) | (1L << String) | (1L << Hashtable) | (1L << Int) | (1L << Void) | (1L << Semi))) != 0)) {
				{
				State = 62; translationUnit(0);
				}
			}

			State = 65; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		public ExternalDeclarationContext externalDeclaration() {
			return GetRuleContext<ExternalDeclarationContext>(0);
		}
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		return translationUnit(0);
	}

	private TranslationUnitContext translationUnit(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, _parentState);
		TranslationUnitContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_translationUnit, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 68; externalDeclaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 74;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TranslationUnitContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_translationUnit);
					State = 70;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 71; externalDeclaration();
					}
					} 
				}
				State = 76;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterExternalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitExternalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_externalDeclaration);
		try {
			State = 80;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; functionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; variableDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		public SimpleVariableTypeContext simpleVariableType() {
			return GetRuleContext<SimpleVariableTypeContext>(0);
		}
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterVariableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitVariableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		VariableTypeContext _localctx = new VariableTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_variableType);
		try {
			State = 87;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; simpleVariableType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; simpleVariableType();
				State = 84; Match(T__0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 86; Match(Void);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleVariableTypeContext : ParserRuleContext {
		public SimpleVariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleVariableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterSimpleVariableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitSimpleVariableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleVariableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleVariableTypeContext simpleVariableType() {
		SimpleVariableTypeContext _localctx = new SimpleVariableTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_simpleVariableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Float) | (1L << Bool) | (1L << String) | (1L << Hashtable) | (1L << Int))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(LittleBigCParser.Identifier, 0); }
		public InitExpressionContext initExpression() {
			return GetRuleContext<InitExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; variableType();
			State = 92; Match(Identifier);
			State = 95;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 93; Match(Assign);
				State = 94; initExpression();
				}
			}

			State = 97; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ArrayInitExpressionContext arrayInitExpression() {
			return GetRuleContext<ArrayInitExpressionContext>(0);
		}
		public InitExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterInitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitInitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitExpressionContext initExpression() {
		InitExpressionContext _localctx = new InitExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_initExpression);
		try {
			State = 102;
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; constant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; arrayInitExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitExpressionContext : ParserRuleContext {
		public SimpleVariableTypeContext simpleVariableType() {
			return GetRuleContext<SimpleVariableTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayInitExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterArrayInitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitArrayInitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitExpressionContext arrayInitExpression() {
		ArrayInitExpressionContext _localctx = new ArrayInitExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_arrayInitExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(New);
			State = 105; simpleVariableType();
			State = 106; Match(LeftBracket);
			State = 107; expression();
			State = 108; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(LittleBigCParser.Identifier, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; variableType();
			State = 111; Match(Identifier);
			State = 112; Match(LeftParen);
			State = 114;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Float) | (1L << Bool) | (1L << String) | (1L << Hashtable) | (1L << Int) | (1L << Void))) != 0)) {
				{
				State = 113; formalParameters(0);
				}
			}

			State = 116; Match(RightParen);
			State = 117; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterContext formalParameter() {
			return GetRuleContext<FormalParameterContext>(0);
		}
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		return formalParameters(0);
	}

	private FormalParametersContext formalParameters(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FormalParametersContext _localctx = new FormalParametersContext(Context, _parentState);
		FormalParametersContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_formalParameters, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 120; formalParameter();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 127;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FormalParametersContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_formalParameters);
					State = 122;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 123; Match(Comma);
					State = 124; formalParameter();
					}
					} 
				}
				State = 129;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(LittleBigCParser.Identifier, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 20, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; variableType();
			State = 131; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemListContext : ParserRuleContext {
		public BlockItemContext blockItem() {
			return GetRuleContext<BlockItemContext>(0);
		}
		public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public BlockItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItemList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterBlockItemList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitBlockItemList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemListContext blockItemList() {
		return blockItemList(0);
	}

	private BlockItemListContext blockItemList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BlockItemListContext _localctx = new BlockItemListContext(Context, _parentState);
		BlockItemListContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_blockItemList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 134; blockItem();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BlockItemListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_blockItemList);
					State = 136;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 137; blockItem();
					}
					} 
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BlockItemContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterBlockItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitBlockItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemContext blockItem() {
		BlockItemContext _localctx = new BlockItemContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockItem);
		try {
			State = 145;
			switch (TokenStream.La(1)) {
			case Float:
			case Bool:
			case String:
			case Hashtable:
			case Int:
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143; variableDeclaration();
				}
				break;
			case Break:
			case Continue:
			case For:
			case If:
			case Return:
			case While:
			case LeftParen:
			case LeftBrace:
			case Semi:
			case Identifier:
			case IntegerConstant:
			case FloatingConstant:
			case StringConstant:
			case BooleanConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 152;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; compoundStatement();
				}
				break;
			case LeftParen:
			case Semi:
			case Identifier:
			case IntegerConstant:
			case FloatingConstant:
			case StringConstant:
			case BooleanConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; expressionStatement();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 3);
				{
				State = 149; selectionStatement();
				}
				break;
			case For:
			case While:
				EnterOuterAlt(_localctx, 4);
				{
				State = 150; iterationStatement();
				}
				break;
			case Break:
			case Continue:
			case Return:
				EnterOuterAlt(_localctx, 5);
				{
				State = 151; jumpStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(LeftBrace);
			State = 156;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Break) | (1L << Continue) | (1L << Float) | (1L << Bool) | (1L << String) | (1L << Hashtable) | (1L << For) | (1L << If) | (1L << Int) | (1L << Return) | (1L << Void) | (1L << While) | (1L << LeftParen) | (1L << LeftBrace) | (1L << Semi) | (1L << Identifier) | (1L << IntegerConstant) | (1L << FloatingConstant) | (1L << StringConstant) | (1L << BooleanConstant))) != 0)) {
				{
				State = 155; blockItemList(0);
				}
			}

			State = 158; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << Identifier) | (1L << IntegerConstant) | (1L << FloatingConstant) | (1L << StringConstant) | (1L << BooleanConstant))) != 0)) {
				{
				State = 160; expression();
				}
			}

			State = 163; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_selectionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(If);
			State = 166; Match(LeftParen);
			State = 167; expression();
			State = 168; Match(RightParen);
			State = 169; statement();
			State = 172;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 170; Match(Else);
				State = 171; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_iterationStatement);
		int _la;
		try {
			State = 195;
			switch (TokenStream.La(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; Match(While);
				State = 175; Match(LeftParen);
				State = 176; expression();
				State = 177; Match(RightParen);
				State = 178; statement();
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; Match(For);
				State = 181; Match(LeftParen);
				State = 183;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << Identifier) | (1L << IntegerConstant) | (1L << FloatingConstant) | (1L << StringConstant) | (1L << BooleanConstant))) != 0)) {
					{
					State = 182; expression();
					}
				}

				State = 185; Match(Semi);
				State = 187;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << Identifier) | (1L << IntegerConstant) | (1L << FloatingConstant) | (1L << StringConstant) | (1L << BooleanConstant))) != 0)) {
					{
					State = 186; expression();
					}
				}

				State = 189; Match(Semi);
				State = 191;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << Identifier) | (1L << IntegerConstant) | (1L << FloatingConstant) | (1L << StringConstant) | (1L << BooleanConstant))) != 0)) {
					{
					State = 190; expression();
					}
				}

				State = 193; Match(RightParen);
				State = 194; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_jumpStatement);
		int _la;
		try {
			State = 206;
			switch (TokenStream.La(1)) {
			case Continue:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; Match(Continue);
				State = 198; Match(Semi);
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; Match(Break);
				State = 200; Match(Semi);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201; Match(Return);
				State = 203;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << Identifier) | (1L << IntegerConstant) | (1L << FloatingConstant) | (1L << StringConstant) | (1L << BooleanConstant))) != 0)) {
					{
					State = 202; expression();
					}
				}

				State = 205; Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(LittleBigCParser.Identifier, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_primaryExpression);
		try {
			State = 214;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208; Match(Identifier);
				}
				break;
			case IntegerConstant:
			case FloatingConstant:
			case StringConstant:
			case BooleanConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; constant();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 210; Match(LeftParen);
				State = 211; expression();
				State = 212; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 217; primaryExpression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 232;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 230;
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 219;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 220; Match(LeftBracket);
						State = 221; expression();
						State = 222; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 224;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 225; Match(LeftParen);
						State = 227;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << Identifier) | (1L << IntegerConstant) | (1L << FloatingConstant) | (1L << StringConstant) | (1L << BooleanConstant))) != 0)) {
							{
							State = 226; argumentExpressionList(0);
							}
						}

						State = 229; Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentExpressionListContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public ArgumentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterArgumentExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitArgumentExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionListContext argumentExpressionList() {
		return argumentExpressionList(0);
	}

	private ArgumentExpressionListContext argumentExpressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentExpressionListContext _localctx = new ArgumentExpressionListContext(Context, _parentState);
		ArgumentExpressionListContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_argumentExpressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 236; assignmentExpression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentExpressionList);
					State = 238;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 239; Match(Comma);
					State = 240; assignmentExpression();
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 247; postfixExpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 260;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 258;
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 249;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 250; Match(Star);
						State = 251; postfixExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 252;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 253; Match(Div);
						State = 254; postfixExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 255;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 256; Match(Mod);
						State = 257; postfixExpression(0);
						}
						break;
					}
					} 
				}
				State = 262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 264; multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 272;
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 266;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 267; Match(Plus);
						State = 268; multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 269;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 270; Match(Minus);
						State = 271; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 278; additiveExpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 294;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 292;
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 280;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 281; Match(Less);
						State = 282; additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 283;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 284; Match(Greater);
						State = 285; additiveExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 286;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 287; Match(LessEqual);
						State = 288; additiveExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 289;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 290; Match(GreaterEqual);
						State = 291; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 298; relationalExpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 306;
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 300;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 301; Match(Equal);
						State = 302; relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 303;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 304; Match(NotEqual);
						State = 305; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		return logicalAndExpression(0);
	}

	private LogicalAndExpressionContext logicalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, _parentState);
		LogicalAndExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_logicalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 312; equalityExpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 319;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAndExpression);
					State = 314;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 315; Match(AndAnd);
					State = 316; equalityExpression(0);
					}
					} 
				}
				State = 321;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		return logicalOrExpression(0);
	}

	private LogicalOrExpressionContext logicalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, _parentState);
		LogicalOrExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_logicalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 323; logicalAndExpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 330;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOrExpression);
					State = 325;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 326; Match(OrOr);
					State = 327; logicalAndExpression(0);
					}
					} 
				}
				State = 332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_assignmentExpression);
		try {
			State = 338;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333; logicalOrExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334; postfixExpression(0);
				State = 335; Match(Assign);
				State = 336; logicalOrExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode IntegerConstant() { return GetToken(LittleBigCParser.IntegerConstant, 0); }
		public ITerminalNode FloatingConstant() { return GetToken(LittleBigCParser.FloatingConstant, 0); }
		public ITerminalNode StringConstant() { return GetToken(LittleBigCParser.StringConstant, 0); }
		public ITerminalNode BooleanConstant() { return GetToken(LittleBigCParser.BooleanConstant, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILittleBigCListener typedListener = listener as ILittleBigCListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILittleBigCVisitor<TResult> typedVisitor = visitor as ILittleBigCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 60, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerConstant) | (1L << FloatingConstant) | (1L << StringConstant) | (1L << BooleanConstant))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return translationUnit_sempred((TranslationUnitContext)_localctx, predIndex);
		case 9: return formalParameters_sempred((FormalParametersContext)_localctx, predIndex);
		case 11: return blockItemList_sempred((BlockItemListContext)_localctx, predIndex);
		case 20: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 21: return argumentExpressionList_sempred((ArgumentExpressionListContext)_localctx, predIndex);
		case 22: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 23: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 24: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 25: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 26: return logicalAndExpression_sempred((LogicalAndExpressionContext)_localctx, predIndex);
		case 27: return logicalOrExpression_sempred((LogicalOrExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool translationUnit_sempred(TranslationUnitContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool formalParameters_sempred(FormalParametersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool blockItemList_sempred(BlockItemListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argumentExpressionList_sempred(ArgumentExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 2);
		case 16: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAndExpression_sempred(LogicalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalOrExpression_sempred(LogicalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x33\x15B\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x3\x2"+
		"\x5\x2\x42\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3K\n\x3\f"+
		"\x3\xE\x3N\v\x3\x3\x4\x3\x4\x3\x4\x5\x4S\n\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x5\x5Z\n\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x5\a\x62\n\a\x3\a\x3"+
		"\a\x3\b\x3\b\x3\b\x5\bi\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3"+
		"\n\x3\n\x5\nu\n\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x80"+
		"\n\v\f\v\xE\v\x83\v\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x8D"+
		"\n\r\f\r\xE\r\x90\v\r\x3\xE\x3\xE\x5\xE\x94\n\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x5\xF\x9B\n\xF\x3\x10\x3\x10\x5\x10\x9F\n\x10\x3\x10\x3\x10"+
		"\x3\x11\x5\x11\xA4\n\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x5\x12\xAF\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xBA\n\x13\x3\x13\x3\x13\x5\x13\xBE"+
		"\n\x13\x3\x13\x3\x13\x5\x13\xC2\n\x13\x3\x13\x3\x13\x5\x13\xC6\n\x13\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xCE\n\x14\x3\x14\x5\x14"+
		"\xD1\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xD9\n\x15"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\xE6\n\x16\x3\x16\a\x16\xE9\n\x16\f\x16\xE\x16\xEC\v\x16"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\xF4\n\x17\f\x17\xE\x17"+
		"\xF7\v\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\a\x18\x105\n\x18\f\x18\xE\x18\x108\v\x18\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x113"+
		"\n\x19\f\x19\xE\x19\x116\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A"+
		"\x127\n\x1A\f\x1A\xE\x1A\x12A\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x135\n\x1B\f\x1B\xE\x1B\x138\v\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x140\n\x1C\f\x1C\xE\x1C"+
		"\x143\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x14B\n\x1D"+
		"\f\x1D\xE\x1D\x14E\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x155"+
		"\n\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x2\r\x4\x14\x18*,.\x30\x32\x34\x36\x38"+
		"!\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34"+
		"\x36\x38:<>\x2\x4\x4\x2\b\v\xE\xE\x3\x2,/\x16A\x2\x41\x3\x2\x2\x2\x4\x45"+
		"\x3\x2\x2\x2\x6R\x3\x2\x2\x2\bY\x3\x2\x2\x2\n[\x3\x2\x2\x2\f]\x3\x2\x2"+
		"\x2\xEh\x3\x2\x2\x2\x10j\x3\x2\x2\x2\x12p\x3\x2\x2\x2\x14y\x3\x2\x2\x2"+
		"\x16\x84\x3\x2\x2\x2\x18\x87\x3\x2\x2\x2\x1A\x93\x3\x2\x2\x2\x1C\x9A\x3"+
		"\x2\x2\x2\x1E\x9C\x3\x2\x2\x2 \xA3\x3\x2\x2\x2\"\xA7\x3\x2\x2\x2$\xC5"+
		"\x3\x2\x2\x2&\xD0\x3\x2\x2\x2(\xD8\x3\x2\x2\x2*\xDA\x3\x2\x2\x2,\xED\x3"+
		"\x2\x2\x2.\xF8\x3\x2\x2\x2\x30\x109\x3\x2\x2\x2\x32\x117\x3\x2\x2\x2\x34"+
		"\x12B\x3\x2\x2\x2\x36\x139\x3\x2\x2\x2\x38\x144\x3\x2\x2\x2:\x154\x3\x2"+
		"\x2\x2<\x156\x3\x2\x2\x2>\x158\x3\x2\x2\x2@\x42\x5\x4\x3\x2\x41@\x3\x2"+
		"\x2\x2\x41\x42\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x44\a\x2\x2\x3\x44"+
		"\x3\x3\x2\x2\x2\x45\x46\b\x3\x1\x2\x46G\x5\x6\x4\x2GL\x3\x2\x2\x2HI\f"+
		"\x3\x2\x2IK\x5\x6\x4\x2JH\x3\x2\x2\x2KN\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3"+
		"\x2\x2\x2M\x5\x3\x2\x2\x2NL\x3\x2\x2\x2OS\x5\x12\n\x2PS\x5\f\a\x2QS\a"+
		"%\x2\x2RO\x3\x2\x2\x2RP\x3\x2\x2\x2RQ\x3\x2\x2\x2S\a\x3\x2\x2\x2TZ\x5"+
		"\n\x6\x2UV\x5\n\x6\x2VW\a\x3\x2\x2WZ\x3\x2\x2\x2XZ\a\x10\x2\x2YT\x3\x2"+
		"\x2\x2YU\x3\x2\x2\x2YX\x3\x2\x2\x2Z\t\x3\x2\x2\x2[\\\t\x2\x2\x2\\\v\x3"+
		"\x2\x2\x2]^\x5\b\x5\x2^\x61\a+\x2\x2_`\a\'\x2\x2`\x62\x5\xE\b\x2\x61_"+
		"\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\a%\x2\x2"+
		"\x64\r\x3\x2\x2\x2\x65i\x5<\x1F\x2\x66i\x5> \x2gi\x5\x10\t\x2h\x65\x3"+
		"\x2\x2\x2h\x66\x3\x2\x2\x2hg\x3\x2\x2\x2i\xF\x3\x2\x2\x2jk\a\x12\x2\x2"+
		"kl\x5\n\x6\x2lm\a\x15\x2\x2mn\x5<\x1F\x2no\a\x16\x2\x2o\x11\x3\x2\x2\x2"+
		"pq\x5\b\x5\x2qr\a+\x2\x2rt\a\x13\x2\x2su\x5\x14\v\x2ts\x3\x2\x2\x2tu\x3"+
		"\x2\x2\x2uv\x3\x2\x2\x2vw\a\x14\x2\x2wx\x5\x1E\x10\x2x\x13\x3\x2\x2\x2"+
		"yz\b\v\x1\x2z{\x5\x16\f\x2{\x81\x3\x2\x2\x2|}\f\x3\x2\x2}~\a&\x2\x2~\x80"+
		"\x5\x16\f\x2\x7F|\x3\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2"+
		"\x81\x82\x3\x2\x2\x2\x82\x15\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84\x85\x5"+
		"\b\x5\x2\x85\x86\a+\x2\x2\x86\x17\x3\x2\x2\x2\x87\x88\b\r\x1\x2\x88\x89"+
		"\x5\x1A\xE\x2\x89\x8E\x3\x2\x2\x2\x8A\x8B\f\x3\x2\x2\x8B\x8D\x5\x1A\xE"+
		"\x2\x8C\x8A\x3\x2\x2\x2\x8D\x90\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F"+
		"\x3\x2\x2\x2\x8F\x19\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x91\x94\x5\f\a\x2"+
		"\x92\x94\x5\x1C\xF\x2\x93\x91\x3\x2\x2\x2\x93\x92\x3\x2\x2\x2\x94\x1B"+
		"\x3\x2\x2\x2\x95\x9B\x5\x1E\x10\x2\x96\x9B\x5 \x11\x2\x97\x9B\x5\"\x12"+
		"\x2\x98\x9B\x5$\x13\x2\x99\x9B\x5&\x14\x2\x9A\x95\x3\x2\x2\x2\x9A\x96"+
		"\x3\x2\x2\x2\x9A\x97\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9A\x99\x3\x2\x2"+
		"\x2\x9B\x1D\x3\x2\x2\x2\x9C\x9E\a\x17\x2\x2\x9D\x9F\x5\x18\r\x2\x9E\x9D"+
		"\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA1\a\x18\x2"+
		"\x2\xA1\x1F\x3\x2\x2\x2\xA2\xA4\x5<\x1F\x2\xA3\xA2\x3\x2\x2\x2\xA3\xA4"+
		"\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA6\a%\x2\x2\xA6!\x3\x2\x2\x2\xA7"+
		"\xA8\a\r\x2\x2\xA8\xA9\a\x13\x2\x2\xA9\xAA\x5<\x1F\x2\xAA\xAB\a\x14\x2"+
		"\x2\xAB\xAE\x5\x1C\xF\x2\xAC\xAD\a\a\x2\x2\xAD\xAF\x5\x1C\xF\x2\xAE\xAC"+
		"\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF#\x3\x2\x2\x2\xB0\xB1\a\x11\x2\x2"+
		"\xB1\xB2\a\x13\x2\x2\xB2\xB3\x5<\x1F\x2\xB3\xB4\a\x14\x2\x2\xB4\xB5\x5"+
		"\x1C\xF\x2\xB5\xC6\x3\x2\x2\x2\xB6\xB7\a\f\x2\x2\xB7\xB9\a\x13\x2\x2\xB8"+
		"\xBA\x5<\x1F\x2\xB9\xB8\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBB\x3\x2"+
		"\x2\x2\xBB\xBD\a%\x2\x2\xBC\xBE\x5<\x1F\x2\xBD\xBC\x3\x2\x2\x2\xBD\xBE"+
		"\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC1\a%\x2\x2\xC0\xC2\x5<\x1F\x2\xC1"+
		"\xC0\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\a\x14"+
		"\x2\x2\xC4\xC6\x5\x1C\xF\x2\xC5\xB0\x3\x2\x2\x2\xC5\xB6\x3\x2\x2\x2\xC6"+
		"%\x3\x2\x2\x2\xC7\xC8\a\x6\x2\x2\xC8\xD1\a%\x2\x2\xC9\xCA\a\x4\x2\x2\xCA"+
		"\xD1\a%\x2\x2\xCB\xCD\a\xF\x2\x2\xCC\xCE\x5<\x1F\x2\xCD\xCC\x3\x2\x2\x2"+
		"\xCD\xCE\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD1\a%\x2\x2\xD0\xC7\x3\x2"+
		"\x2\x2\xD0\xC9\x3\x2\x2\x2\xD0\xCB\x3\x2\x2\x2\xD1\'\x3\x2\x2\x2\xD2\xD9"+
		"\a+\x2\x2\xD3\xD9\x5> \x2\xD4\xD5\a\x13\x2\x2\xD5\xD6\x5<\x1F\x2\xD6\xD7"+
		"\a\x14\x2\x2\xD7\xD9\x3\x2\x2\x2\xD8\xD2\x3\x2\x2\x2\xD8\xD3\x3\x2\x2"+
		"\x2\xD8\xD4\x3\x2\x2\x2\xD9)\x3\x2\x2\x2\xDA\xDB\b\x16\x1\x2\xDB\xDC\x5"+
		"(\x15\x2\xDC\xEA\x3\x2\x2\x2\xDD\xDE\f\x4\x2\x2\xDE\xDF\a\x15\x2\x2\xDF"+
		"\xE0\x5<\x1F\x2\xE0\xE1\a\x16\x2\x2\xE1\xE9\x3\x2\x2\x2\xE2\xE3\f\x3\x2"+
		"\x2\xE3\xE5\a\x13\x2\x2\xE4\xE6\x5,\x17\x2\xE5\xE4\x3\x2\x2\x2\xE5\xE6"+
		"\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xE9\a\x14\x2\x2\xE8\xDD\x3\x2\x2"+
		"\x2\xE8\xE2\x3\x2\x2\x2\xE9\xEC\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB"+
		"\x3\x2\x2\x2\xEB+\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xED\xEE\b\x17\x1\x2"+
		"\xEE\xEF\x5:\x1E\x2\xEF\xF5\x3\x2\x2\x2\xF0\xF1\f\x3\x2\x2\xF1\xF2\a&"+
		"\x2\x2\xF2\xF4\x5:\x1E\x2\xF3\xF0\x3\x2\x2\x2\xF4\xF7\x3\x2\x2\x2\xF5"+
		"\xF3\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6-\x3\x2\x2\x2\xF7\xF5\x3\x2\x2"+
		"\x2\xF8\xF9\b\x18\x1\x2\xF9\xFA\x5*\x16\x2\xFA\x106\x3\x2\x2\x2\xFB\xFC"+
		"\f\x5\x2\x2\xFC\xFD\a\x1F\x2\x2\xFD\x105\x5*\x16\x2\xFE\xFF\f\x4\x2\x2"+
		"\xFF\x100\a \x2\x2\x100\x105\x5*\x16\x2\x101\x102\f\x3\x2\x2\x102\x103"+
		"\a!\x2\x2\x103\x105\x5*\x16\x2\x104\xFB\x3\x2\x2\x2\x104\xFE\x3\x2\x2"+
		"\x2\x104\x101\x3\x2\x2\x2\x105\x108\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2"+
		"\x106\x107\x3\x2\x2\x2\x107/\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x109\x10A"+
		"\b\x19\x1\x2\x10A\x10B\x5.\x18\x2\x10B\x114\x3\x2\x2\x2\x10C\x10D\f\x4"+
		"\x2\x2\x10D\x10E\a\x1D\x2\x2\x10E\x113\x5.\x18\x2\x10F\x110\f\x3\x2\x2"+
		"\x110\x111\a\x1E\x2\x2\x111\x113\x5.\x18\x2\x112\x10C\x3\x2\x2\x2\x112"+
		"\x10F\x3\x2\x2\x2\x113\x116\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x114\x115"+
		"\x3\x2\x2\x2\x115\x31\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x117\x118\b\x1A"+
		"\x1\x2\x118\x119\x5\x30\x19\x2\x119\x128\x3\x2\x2\x2\x11A\x11B\f\x6\x2"+
		"\x2\x11B\x11C\a\x19\x2\x2\x11C\x127\x5\x30\x19\x2\x11D\x11E\f\x5\x2\x2"+
		"\x11E\x11F\a\x1B\x2\x2\x11F\x127\x5\x30\x19\x2\x120\x121\f\x4\x2\x2\x121"+
		"\x122\a\x1A\x2\x2\x122\x127\x5\x30\x19\x2\x123\x124\f\x3\x2\x2\x124\x125"+
		"\a\x1C\x2\x2\x125\x127\x5\x30\x19\x2\x126\x11A\x3\x2\x2\x2\x126\x11D\x3"+
		"\x2\x2\x2\x126\x120\x3\x2\x2\x2\x126\x123\x3\x2\x2\x2\x127\x12A\x3\x2"+
		"\x2\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x33\x3\x2\x2\x2"+
		"\x12A\x128\x3\x2\x2\x2\x12B\x12C\b\x1B\x1\x2\x12C\x12D\x5\x32\x1A\x2\x12D"+
		"\x136\x3\x2\x2\x2\x12E\x12F\f\x4\x2\x2\x12F\x130\a(\x2\x2\x130\x135\x5"+
		"\x32\x1A\x2\x131\x132\f\x3\x2\x2\x132\x133\a)\x2\x2\x133\x135\x5\x32\x1A"+
		"\x2\x134\x12E\x3\x2\x2\x2\x134\x131\x3\x2\x2\x2\x135\x138\x3\x2\x2\x2"+
		"\x136\x134\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x35\x3\x2\x2\x2\x138"+
		"\x136\x3\x2\x2\x2\x139\x13A\b\x1C\x1\x2\x13A\x13B\x5\x34\x1B\x2\x13B\x141"+
		"\x3\x2\x2\x2\x13C\x13D\f\x3\x2\x2\x13D\x13E\a\"\x2\x2\x13E\x140\x5\x34"+
		"\x1B\x2\x13F\x13C\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F\x3\x2\x2"+
		"\x2\x141\x142\x3\x2\x2\x2\x142\x37\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x144"+
		"\x145\b\x1D\x1\x2\x145\x146\x5\x36\x1C\x2\x146\x14C\x3\x2\x2\x2\x147\x148"+
		"\f\x3\x2\x2\x148\x149\a#\x2\x2\x149\x14B\x5\x36\x1C\x2\x14A\x147\x3\x2"+
		"\x2\x2\x14B\x14E\x3\x2\x2\x2\x14C\x14A\x3\x2\x2\x2\x14C\x14D\x3\x2\x2"+
		"\x2\x14D\x39\x3\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14F\x155\x5\x38\x1D\x2"+
		"\x150\x151\x5*\x16\x2\x151\x152\a\'\x2\x2\x152\x153\x5\x38\x1D\x2\x153"+
		"\x155\x3\x2\x2\x2\x154\x14F\x3\x2\x2\x2\x154\x150\x3\x2\x2\x2\x155;\x3"+
		"\x2\x2\x2\x156\x157\x5:\x1E\x2\x157=\x3\x2\x2\x2\x158\x159\t\x3\x2\x2"+
		"\x159?\x3\x2\x2\x2&\x41LRY\x61ht\x81\x8E\x93\x9A\x9E\xA3\xAE\xB9\xBD\xC1"+
		"\xC5\xCD\xD0\xD8\xE5\xE8\xEA\xF5\x104\x106\x112\x114\x126\x128\x134\x136"+
		"\x141\x14C\x154";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
