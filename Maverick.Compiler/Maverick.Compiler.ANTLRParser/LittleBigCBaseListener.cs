//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Dev/GitHub/Compiler/Grammar\LittleBigC.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ILittleBigCListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class LittleBigCBaseListener : ILittleBigCListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.compilationUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompilationUnit([NotNull] LittleBigCParser.CompilationUnitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.compilationUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompilationUnit([NotNull] LittleBigCParser.CompilationUnitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.translationUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTranslationUnit([NotNull] LittleBigCParser.TranslationUnitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.translationUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTranslationUnit([NotNull] LittleBigCParser.TranslationUnitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.externalDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExternalDeclaration([NotNull] LittleBigCParser.ExternalDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.externalDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExternalDeclaration([NotNull] LittleBigCParser.ExternalDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.variableType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableType([NotNull] LittleBigCParser.VariableTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.variableType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableType([NotNull] LittleBigCParser.VariableTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.simpleVariableType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleVariableType([NotNull] LittleBigCParser.SimpleVariableTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.simpleVariableType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleVariableType([NotNull] LittleBigCParser.SimpleVariableTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.variableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclaration([NotNull] LittleBigCParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.variableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclaration([NotNull] LittleBigCParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.initExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInitExpression([NotNull] LittleBigCParser.InitExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.initExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInitExpression([NotNull] LittleBigCParser.InitExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.arrayInitExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayInitExpression([NotNull] LittleBigCParser.ArrayInitExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.arrayInitExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayInitExpression([NotNull] LittleBigCParser.ArrayInitExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.functionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDefinition([NotNull] LittleBigCParser.FunctionDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.functionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDefinition([NotNull] LittleBigCParser.FunctionDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.formalParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormalParameters([NotNull] LittleBigCParser.FormalParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.formalParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormalParameters([NotNull] LittleBigCParser.FormalParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.formalParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormalParameter([NotNull] LittleBigCParser.FormalParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.formalParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormalParameter([NotNull] LittleBigCParser.FormalParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.blockItemList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockItemList([NotNull] LittleBigCParser.BlockItemListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.blockItemList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockItemList([NotNull] LittleBigCParser.BlockItemListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.blockItem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockItem([NotNull] LittleBigCParser.BlockItemContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.blockItem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockItem([NotNull] LittleBigCParser.BlockItemContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] LittleBigCParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] LittleBigCParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.compoundStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompoundStatement([NotNull] LittleBigCParser.CompoundStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.compoundStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompoundStatement([NotNull] LittleBigCParser.CompoundStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.expressionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStatement([NotNull] LittleBigCParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.expressionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStatement([NotNull] LittleBigCParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.selectionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSelectionStatement([NotNull] LittleBigCParser.SelectionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.selectionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSelectionStatement([NotNull] LittleBigCParser.SelectionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIterationStatement([NotNull] LittleBigCParser.IterationStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIterationStatement([NotNull] LittleBigCParser.IterationStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.jumpStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterJumpStatement([NotNull] LittleBigCParser.JumpStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.jumpStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitJumpStatement([NotNull] LittleBigCParser.JumpStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimaryExpression([NotNull] LittleBigCParser.PrimaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimaryExpression([NotNull] LittleBigCParser.PrimaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.postfixExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostfixExpression([NotNull] LittleBigCParser.PostfixExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.postfixExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostfixExpression([NotNull] LittleBigCParser.PostfixExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.argumentExpressionList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentExpressionList([NotNull] LittleBigCParser.ArgumentExpressionListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.argumentExpressionList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentExpressionList([NotNull] LittleBigCParser.ArgumentExpressionListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.multiplicativeExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicativeExpression([NotNull] LittleBigCParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.multiplicativeExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicativeExpression([NotNull] LittleBigCParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.additiveExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveExpression([NotNull] LittleBigCParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.additiveExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveExpression([NotNull] LittleBigCParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.relationalExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationalExpression([NotNull] LittleBigCParser.RelationalExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.relationalExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationalExpression([NotNull] LittleBigCParser.RelationalExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.equalityExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqualityExpression([NotNull] LittleBigCParser.EqualityExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.equalityExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqualityExpression([NotNull] LittleBigCParser.EqualityExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.logicalAndExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalAndExpression([NotNull] LittleBigCParser.LogicalAndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.logicalAndExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalAndExpression([NotNull] LittleBigCParser.LogicalAndExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.logicalOrExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOrExpression([NotNull] LittleBigCParser.LogicalOrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.logicalOrExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOrExpression([NotNull] LittleBigCParser.LogicalOrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.assignmentExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentExpression([NotNull] LittleBigCParser.AssignmentExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.assignmentExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentExpression([NotNull] LittleBigCParser.AssignmentExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] LittleBigCParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] LittleBigCParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LittleBigCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstant([NotNull] LittleBigCParser.ConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LittleBigCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstant([NotNull] LittleBigCParser.ConstantContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
